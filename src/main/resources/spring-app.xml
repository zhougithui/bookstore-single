<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-4.2.xsd
			http://www.springframework.org/schema/task
			http://www.springframework.org/schema/task/spring-task-4.2.xsd
			http://www.springframework.org/schema/util 
			http://www.springframework.org/schema/util/spring-util-4.2.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">
	<!-- 加载配置文件 --> 
	<context:property-placeholder location="classpath:application-${spring.profiles.active}.properties"/>
	<!-- 扫描service自动注入为bean -->
	<context:component-scan base-package="org.bear.bookstore.service.impl,org.bear.bookstore.dao.impl" />
	
	<!-- 
		激活自动代理功能Enables the use of the @AspectJ style of Spring AOP
		注册的是AnnotationAwareAspectJAutoProxyCreator
	-->
	<aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true">
		<aop:include name=".*"/>
	</aop:aspectj-autoproxy>
	<!-- <context:load-time-weaver aspectj-weaving="on"
		weaver-class="org.springframework.instrument.classloading.tomcat.TomcatLoadTimeWeaver"/> -->
	<!-- <context:load-time-weaver aspectj-weaving="autodetect"/> -->
	
	<bean id="proxyReferecetAwareProcessor" class="org.bear.bookstore.common.aware.ProxyReferecetAwareProcessor"></bean>
	
	<!-- 
		spring 观察者模式的模型抽象使用实例
		使用的是java的EventObject以及EventListener
	 -->
	<bean id="emailService" class="org.bear.bookstore.common.observer.EmailService">
	    <property name="blackList">
	        <list>
	            <value>known.spammer@example.org</value>
	            <value>known.hacker@example.org</value>
	            <value>john.doe@example.org</value>
	        </list>
	    </property>
	</bean>
	
	<bean id="blackListNotifier" class="org.bear.bookstore.common.observer.BlackListNotifier">
	    <property name="notificationAddress" value="blacklist@example.org"/>
	</bean>
	<bean id="entityCreatedNotifier" class="org.bear.bookstore.common.observer.EntityCreatedNotifier"></bean>
	
	
	<bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
	    <property name="customEditors">
	        <map>
	            <entry key="org.bear.bookstore.domain.Custom" value="org.bear.bookstore.common.editor.CustomEditor"/>
	        </map>
	    </property>
	</bean>
	
	
	<!-- 
		服务器端定义rmi服务
	 -->
	<bean class="org.springframework.remoting.rmi.RmiServiceExporter">
	    <!-- does not necessarily have to be the same name as the bean to be exported -->
	    <property name="serviceName" value="customService"/>
	    <property name="service" ref="customService"/>
	    <property name="serviceInterface" value="org.bear.bookstore.service.ICustomService"/>
	    <!-- defaults to 1099 -->
	    <property name="registryPort" value="1199"/>
	</bean>
	
	
	<!-- 
		 Hessian 服务器端 http://HOST:80/AccountService
	 -->
	<bean name="customHessianServer" class="org.springframework.remoting.caucho.HessianServiceExporter">
	    <property name="service" ref="customService"/>
	    <property name="serviceInterface" value="org.bear.bookstore.service.ICustomService"/>
		<property name="interceptors" ref="authorizationInterceptor"/>
	</bean>

	<bean id="authorizationInterceptor"
	        class="org.springframework.web.servlet.handler.UserRoleAuthorizationInterceptor">
	    <property name="authorizedRoles" value="administrator,zh"/>
	</bean>
	
</beans>
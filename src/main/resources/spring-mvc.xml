<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">                    
 
	<!-- 扫描controller自动注入为bean -->
	<context:component-scan base-package="org.bear.bookstore.web" />
	
	<!-- don't handle the static resource -->
    <mvc:default-servlet-handler />
 
    <!-- if you use annotation you must configure following setting -->
    <mvc:annotation-driven enable-matrix-variables="true">
    	<!-- <mvc:async-support ></mvc:async-support> -->
    	<!-- 
    		在这个地方和在RequestMappingHandlerAdapter中配置的区别是什么
    		为什么在这配置有用在RequestMappingHandlerAdapter中配置没用
    	 -->
    	<!-- <mvc:message-converters>
    		<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean class="com.fasterxml.jackson.databind.ObjectMapper">
						<property name="dateFormat">
					   		<bean class="java.text.SimpleDateFormat">
					   			<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"/>
					   		</bean>
						</property>
					</bean>
	     		</property>
			</bean>
    	</mvc:message-converters> -->
    </mvc:annotation-driven>
    
    <!-- 
    	spring mvc提供的默认策略，同样也是可以拓展的点START
    	策略都保存在dispatchServlet同级目录下DispatcherServlet.properties文件中
     -->
    <!-- 
    	upload settings 
    	文件上床，id为dispatcher中定义的beanName
    	public static final String MULTIPART_RESOLVER_BEAN_NAME = "multipartResolver";
   	-->
	<bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	    <property name="maxUploadSize" value="102400000"></property>
	</bean>
	
	<!-- 
		国际化bean初始化，如果beanName为localeResolver的没有配置，则会默认初始化DispatcherServlet中的配置的
		org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver
	 -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"></bean>
	<bean id="themeResolver" class="org.springframework.web.servlet.theme.FixedThemeResolver"></bean>
	
	<!-- 
		通过标志位detectAllHandlerMappings判断是否需要检索所有的handlerMapping，如果为true，下面两个配置的都会被检索
		然后进行排序，如果为false，则只会检索出beanName为handlerMapping的
		如果ID为handlerMapping没有配置，则会创建一下两个保存在
		List<HandlerMapping> org.springframework.web.servlet.DispatcherServlet.handlerMappings中
	 -->
	<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"></bean>
	<bean id="handlerMapping" class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"></bean>
	
	<!-- 
		通过标志位detectAllHandlerAdapters判断是否需要检索所有的handlerAdapter，如果为true，下面三个配置的都会被检索
		然后进行排序，如果为false，则只会检索出beanName为handlerAdapter的
		如果ID为handlerAdapter没有配置，则会创建一下三个保存在
		List<HandlerAdapter> org.springframework.web.servlet.DispatcherServlet.handlerAdapters中
	 -->
	<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"></bean>
	<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"></bean>
	<!-- 
		org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter的取缔类
		org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter
		
		配置多个RequestMappingHandlerAdapter引发的覆盖问题：
		mvc:annotation-driven首先会注册一个RequestMappingHandlerAdapter
		如果没有指定id为org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter
		前提是allowBeanDefinitionOverriding为true的情况下，默认为true
		，则会覆盖，否则不会覆盖，这样spring会选择第一个匹配的adapter来处理请求，也就是bean的注册顺序
		mvc:annotation-driven已经注册了一个RequestMappingHandlerAdapter，如果没有配置messageConverters
		系统会初始化默认的messageConverters，所以id为requestMappingHandlerAdapter中配置的
		messageConverters没有生效
		
		//选择第一个匹配的adapter
		protected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException {
			for (HandlerAdapter ha : this.handlerAdapters) {
				if (logger.isTraceEnabled()) {
					logger.trace("Testing handler adapter [" + ha + "]");
				}
				if (ha.supports(handler)) {
					return ha;
				}
			}
			throw new ServletException("No adapter for handler [" + handler +
					"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler");
		}
	 -->
	<!-- <bean id="requestMappingHandlerAdapter" -->
	<bean id="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"
	 class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
					<property name="objectMapper">
						<bean class="com.fasterxml.jackson.databind.ObjectMapper">
							<property name="dateFormat">
						   		<bean class="java.text.SimpleDateFormat">
						   			<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"/>
						   		</bean>
							</property>
						</bean>
		     		</property>
				</bean>
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain; charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>
	
	<!-- 
		通过标志位detectAllHandlerExceptionResolvers判断是否需要检索所有的handlerExceptionResolver，如果为true，下面三个配置的都会被检索
		然后进行排序，如果为false，则只会检索出beanName为handlerExceptionResolver的
		如果ID为handlerExceptionResolver没有配置，则会创建一下三个保存在
		List<HandlerExceptionResolver> org.springframework.web.servlet.DispatcherServlet.handlerExceptionResolvers
	 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver"></bean>
	<bean class="org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver"></bean>
	<bean id="handlerExceptionResolver" class="org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"></bean>
	<!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	    <property name="exceptionMappings">
	        <props>
	            <prop key="java.lang.ArithmeticException">error</prop>
	        </props>
	    </property>
	</bean> -->
	
	<!-- 
		如果beanName为viewNameTranslator不存在，则spring mvc会创建一个类为
		org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator的实例
	 -->
	 <bean id="viewNameTranslator" class="org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator"></bean>
	
	<!-- 
		通过标志位detectAllViewResolvers判断是否需要检索所有的viewResolver，如果为true，
		则一下配置的id并无实际意义，可以不进行配置
		List<ViewResolver> org.springframework.web.servlet.DispatcherServlet.viewResolvers 
		spring mvc默认使用org.springframework.web.servlet.view.InternalResourceViewResolver
	 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 前缀 -->
        <property name="prefix" value="/WEB-INF/jsp/" />
        <!-- 后缀 -->
        <property name="suffix" value=".jsp" />
    </bean>
    
    <!-- 
    	如果beanName为flashMapManager没有配置，则springmvc默认使用
    	org.springframework.web.servlet.support.SessionFlashMapManager
     -->
     <bean id="flashMapManager" class="org.springframework.web.servlet.support.SessionFlashMapManager"></bean>
	
	<!-- springmvc提供的默认配置以及拓展点 END -->
	
	
	
	
	
	<!-- interceptor setting -->
	<mvc:interceptors>
	    <mvc:interceptor>
	        <mvc:mapping path="/**"/>
	        <bean class="org.bear.bookstore.common.interceptor.AuthorityInterceptor"></bean>
	    </mvc:interceptor>        
	</mvc:interceptors>
	
	<!-- WebMvcConfigurerAdapte或者@CrossOrigin注解 -->
	<!-- <mvc:cors>
		<mvc:mapping path="/api/**"
			allowed-origins="http://domain1.com, http://domain2.com"
			allowed-methods="GET, PUT"
			allowed-headers="header1, header2, header3"
			exposed-headers="header1, header2" allow-credentials="false"
			max-age="123" />
		<mvc:mapping path="/resources/**"
			allowed-origins="http://domain1.com" />
	</mvc:cors> -->
</beans>
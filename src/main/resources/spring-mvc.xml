<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:oxm="http://www.springframework.org/schema/oxm"
    xmlns:websocket="http://www.springframework.org/schema/websocket"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
        http://www.springframework.org/schema/oxm 
		http://www.springframework.org/schema/oxm/spring-oxm-4.2.xsd
		http://www.springframework.org/schema/websocket
        http://www.springframework.org/schema/websocket/spring-websocket-4.2.xsd">                    
 
	<!-- 扫描controller自动注入为bean -->
	<context:component-scan base-package="org.bear.bookstore.web" />
	
	<!--
		此标签会注入DefaultServletHttpRequestHandler对象
		以下是处理请求的方式，获取容器的RequestDispatcher，进行请求转发
		RequestDispatcher rd = this.servletContext.getNamedDispatcher(this.defaultServletName);
		if (rd == null) {
			throw new IllegalStateException("A RequestDispatcher could not be located for the default servlet '" +
					this.defaultServletName + "'");
		}
		rd.forward(request, response);
		
		当然，如果dispatcherServlet配置拦截路径为/*时，springmvc会拦截所有的请求，*.jsp/*.css/*.do等
		这个时候如果没有配置default-servlet-handler，则jsp和css会出现404，配置了jsp会显示源码   因此dispatcherServlet拦截路径不能配置成/*
		
		如果dispatcherServlet配置拦截路径为/时，则不会拦截*.jsp，jsp交由tomcat的default的servlet处理
	 -->
    <mvc:default-servlet-handler default-servlet-name="default"/>
    
    <!-- 
		静态资源缓存，注册一个SimpleUrlHandlerMapping和ResourceHttpRequestHandler来处理
		和mvc:default-servlet-handler
	 -->
	<mvc:resources mapping="/resources/**" location="/common/">
	    <mvc:cache-control max-age="3600" cache-public="true"/>
	</mvc:resources>
    
    <!-- 
    	当dispatcherServlet配置的拦截路径为/*时，访问跟路径是会重定向到index.jsp 
    	如果web.xml中配置了
		<welcome-file-list>
			<welcome-file>index.jsp</welcome-file>
			<welcome-file>index1.jsp</welcome-file>
		</welcome-file-list>
		则会先访问index.jsp，然后index1.jsp，如果访问不到则出现404
		
		也就是如果说对于访问跟路径来说，配置了welcome-file-list，则下面配置毫无意义
     -->
    <mvc:view-controller path="/" view-name="redirect:index.jsp"/>
 
 	<!-- 
 		自定义validator
 	 -->
 	<bean id="messageSource"    
	    class="org.springframework.context.support.ReloadableResourceBundleMessageSource">    
	    <property name="basenames">    
	        <list>    
	            <value>classpath:messages/messages</value>    
	            <value>classpath:org/hibernate/validator/ValidationMessages</value>    
	        </list>    
	    </property>    
	    <!-- 
	    	AbstractMessageSource
	    	/**
			 * Return a fallback default message for the given code, if any.
			 * <p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,
			 * or return no fallback else. In case of no fallback, the caller will usually
			 * receive a NoSuchMessageException from {@code getMessage}.
			 * @param code the message code that we couldn't resolve
			 * and that we didn't receive an explicit default message for
			 * @return the default message to use, or {@code null} if none
			 * @see #setUseCodeAsDefaultMessage
			 */
			protected String getDefaultMessage(String code) {
				if (isUseCodeAsDefaultMessage()) {
					return code;
				}
				return null;
			}
			 如果为true，则直接返回min，不往下进行解析，默认值也是false
	     -->
	    <property name="useCodeAsDefaultMessage" value="false" />    
	</bean>    
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">      
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>  
		<property name="validationMessageSource" ref="messageSource"/>      
	</bean>
    <!-- if you use annotation you must configure following setting -->
    <mvc:annotation-driven enable-matrix-variables="true" validator="validator">
    	<!-- <mvc:async-support ></mvc:async-support> -->
    	<!-- 
    		在这个地方和在RequestMappingHandlerAdapter中配置的区别是什么
    		为什么在这配置有用在RequestMappingHandlerAdapter中配置没用,
    		在下面配置的RequestMappingHandlerAdapter解释
    	 -->
    	<mvc:message-converters>
    		<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean class="com.fasterxml.jackson.databind.ObjectMapper">
						<property name="dateFormat">
					   		<bean class="java.text.SimpleDateFormat">
					   			<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"/>
					   		</bean>
						</property>
					</bean>
	     		</property>
			</bean>
    	</mvc:message-converters>
    	<!-- 
    		默认值 
	    	RequestMappingInfo.BuilderConfiguration
				private boolean suffixPatternMatch = true;
	    		private boolean trailingSlashMatch = true;
				private boolean registeredSuffixPatternMatch = false;
			
			AbstractHandlerMapping
				private UrlPathHelper urlPathHelper = new UrlPathHelper();
				private PathMatcher pathMatcher = new AntPathMatcher();
    	 -->
    	<mvc:path-matching
	        suffix-pattern="true"
	        trailing-slash="true"
	        registered-suffixes-only="false"/>
    </mvc:annotation-driven>
     
    <!-- <mvc:view-resolvers>
	    <mvc:script-template/>
	</mvc:view-resolvers> -->
    
    <!-- 
    	spring mvc提供的默认策略，同样也是可以拓展的点START
    	策略都保存在dispatchServlet同级目录下DispatcherServlet.properties文件中
     -->
    <!-- 
    	upload settings 
    	文件上床，id为dispatcher中定义的beanName
    	public static final String MULTIPART_RESOLVER_BEAN_NAME = "multipartResolver";
   	-->
	<bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	    <property name="maxUploadSize" value="102400000"></property>
	</bean>
	
	<!-- 
		国际化bean初始化，如果beanName为localeResolver的没有配置，则会默认初始化DispatcherServlet中的配置的
		org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver
	 -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"></bean>
  
	<!--
		只能存在一个localeResolver
		in seconds. If set to -1, the cookie is not persisted (deleted when browser shuts down) 
	-->
	<!-- <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
	    <property name="cookieName" value="clientlanguage"/>
	    <property name="cookieMaxAge" value="100000" />
	</bean> -->
	
	<!-- 
	FixedThemeResolver
		Selects a fixed theme, set using the defaultThemeName property.
	SessionThemeResolver
		The theme is maintained in the user’s HTTP session. It only 
		needs to be set once for each session, but is not persisted between sessions.
	CookieThemeResolver
		The selected theme is stored in a cookie on the client.
	 -->
	<!-- <bean id="themeResolver" class="org.springframework.web.servlet.theme.FixedThemeResolver"></bean> -->
	<!-- 
		如果直接访问jsp，则不通过拦截器直接使用springmvc的theme默认为theme
		如果是访问/api/cus/getCusById/1?siteTheme=cool，则会修改theme为cool，并在此session一直生效
		org.springframework.web.servlet.theme.ThemeChangeInterceptor
	-->
	<bean id="themeResolver" class="org.springframework.web.servlet.theme.SessionThemeResolver"></bean>
	<!-- <bean id="themeResolver" class="org.springframework.web.servlet.theme.CookieThemeResolver"></bean> -->
	
	<!-- 
		通过标志位detectAllHandlerMappings判断是否需要检索所有的handlerMapping，如果为true，下面两个配置的都会被检索
		然后进行排序，如果为false，则只会检索出beanName为handlerMapping的
		如果ID为handlerMapping没有配置，则会创建一下两个保存在
		List<HandlerMapping> org.springframework.web.servlet.DispatcherServlet.handlerMappings中
	 -->
	<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"></bean>
	<bean id="handlerMapping" class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"></bean>
	
	<!-- 
		通过标志位detectAllHandlerAdapters判断是否需要检索所有的handlerAdapter，如果为true，下面三个配置的都会被检索
		然后进行排序，如果为false，则只会检索出beanName为handlerAdapter的
		如果ID为handlerAdapter没有配置，则会创建一下三个保存在
		List<HandlerAdapter> org.springframework.web.servlet.DispatcherServlet.handlerAdapters中
	 -->
	<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"></bean>
	<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"></bean>
	<!-- 
		org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter的取缔类
		org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter
		
		配置多个RequestMappingHandlerAdapter引发的覆盖问题：
		mvc:annotation-driven首先会注册一个RequestMappingHandlerAdapter
		如果没有指定id为org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter
		前提是allowBeanDefinitionOverriding为true的情况下，默认为true
		，则会覆盖，否则不会覆盖，这样spring会选择第一个匹配的adapter来处理请求，也就是bean的注册顺序
		mvc:annotation-driven已经注册了一个RequestMappingHandlerAdapter，如果没有配置messageConverters
		系统会初始化默认的messageConverters，所以id为requestMappingHandlerAdapter中配置的
		messageConverters没有生效
		
		//选择第一个匹配的adapter
		protected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException {
			for (HandlerAdapter ha : this.handlerAdapters) {
				if (logger.isTraceEnabled()) {
					logger.trace("Testing handler adapter [" + ha + "]");
				}
				if (ha.supports(handler)) {
					return ha;
				}
			}
			throw new ServletException("No adapter for handler [" + handler +
					"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler");
		}
	 -->
	<!-- <bean id="requestMappingHandlerAdapter" -->
	<!-- <bean id="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"
	 class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
					<property name="objectMapper">
						<bean class="com.fasterxml.jackson.databind.ObjectMapper">
							<property name="dateFormat">
						   		<bean class="java.text.SimpleDateFormat">
						   			<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"/>
						   		</bean>
							</property>
						</bean>
		     		</property>
				</bean>
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain; charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean> -->
	
	<!-- 
		通过标志位detectAllHandlerExceptionResolvers判断是否需要检索所有的handlerExceptionResolver，如果为true，下面三个配置的都会被检索
		然后进行排序，如果为false，则只会检索出beanName为handlerExceptionResolver的
		如果ID为handlerExceptionResolver没有配置，则会创建一下三个保存在
		List<HandlerExceptionResolver> org.springframework.web.servlet.DispatcherServlet.handlerExceptionResolvers
	 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver"></bean>
	<bean class="org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver"></bean>
	<bean id="handlerExceptionResolver" class="org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"></bean>
	<!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	    <property name="exceptionMappings">
	        <props>
	            <prop key="java.lang.ArithmeticException">error</prop>
	        </props>
	    </property>
	</bean> -->
	
	<!-- 
		如果beanName为viewNameTranslator不存在，则spring mvc会创建一个类为
		org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator的实例
	 -->
	 <bean id="viewNameTranslator" class="org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator"></bean>
	
	<!-- 
		通过标志位detectAllViewResolvers判断是否需要检索所有的viewResolver，如果为true，
		则一下配置的id并无实际意义，可以不进行配置 
		List<ViewResolver> org.springframework.web.servlet.DispatcherServlet.viewResolvers 
		spring mvc默认使用org.springframework.web.servlet.view.InternalResourceViewResolver
	 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
        <property name="order" value="10"/>
    </bean>
    
    <!-- 配置freeMarker视图解析器 -->
    <bean id="viewResolverFtl" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
        <property name="contentType" value="text/html; charset=utf-8"/>
        <property name="cache" value="true" />
        <property name="suffix" value=".ftl" />
        <property name="order" value="1"/>
    </bean>

    <!-- 配置freeMarker的模板路径 -->
    <bean id="freemarkerConfig"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath">
			<value>/WEB-INF/ftl/</value>
		</property>
		<property name="freemarkerVariables">
			<map>
				<entry key="xml_escape" value-ref="fmXmlEscape" />
			</map>
		</property>
		<property name="defaultEncoding">
			<value>utf-8</value>
		</property>
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">3600</prop>
			</props>
		</property>
	</bean>
	<bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" />
   
    <!-- 配置Velocity视图解析器 -->
    <bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
        <property name="cache" value="false"/>
        <property name="order" value="0"/>
        <property name="suffix" value=".vm"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <!-- <property name="toolboxConfigLocation" value="WEB-INF/velocity/toolbox.xml"/> -->
    </bean>
 
    <!-- 配置Velocity引擎 -->
    <bean id="velocityConfigurer" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath" value="/WEB-INF/velocity/vm/"/>
        <!-- 中文乱码解决 -->
        <property name="velocityProperties">
            <props>
                <prop key="input.encoding">utf-8</prop>
                <prop key="output.encoding">utf-8</prop>
            </props>
        </property> 
    </bean>
    
    <mvc:script-template-configurer engine-name="nashorn" render-object="Mustache" render-function="render">
	    <mvc:script location="/common/mustache/mustache.js"/>
	    <mvc:script location="/common/mustache/render.js"/>
	</mvc:script-template-configurer>
	<bean id="scriptViewResolver" class="org.springframework.web.servlet.view.script.ScriptTemplateViewResolver">
        <property name="order" value="2"/>
        <property name="prefix" value="/WEB-INF/mustache/" />
        <property name="suffix" value=".html"/>
    </bean>
    
    <!-- 
    	oxm 的支持
     -->
    <oxm:jaxb2-marshaller id="marshaller" >
		<oxm:class-to-be-bound name="org.bear.bookstore.web.vo.CustomVo"/>
	</oxm:jaxb2-marshaller> 
	<bean name="jaxb2" class="org.springframework.web.servlet.view.xml.MarshallingView">  
		<constructor-arg ref="marshaller" />
	</bean>
	<!-- 视图解析器，根据视图的名称new ModelAndView(name)，在配置文件查找对应的bean配置 -->  
    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">  
        <property name="order" value="3"/>  
    </bean>  
    
    <!-- 
		xslt支持
	 -->
	 <bean id="xsltViewResolver" class="org.springframework.web.servlet.view.xslt.XsltViewResolver">
        <property name="order" value="4"/>
        <property name="prefix" value="/WEB-INF/xslt/" />
        <property name="suffix" value=".xslt"/>
    </bean>
    
    
    <!-- 
    	如果beanName为flashMapManager没有配置，则springmvc默认使用
    	org.springframework.web.servlet.support.SessionFlashMapManager
     -->
     <bean id="flashMapManager" class="org.springframework.web.servlet.support.SessionFlashMapManager"></bean>
	
	<!-- springmvc提供的默认配置以及拓展点 END -->
	
	
	
	
	<!-- interceptor setting -->
	<mvc:interceptors>
	    <mvc:interceptor> 
	        <mvc:mapping path="/**"/>
	        <bean class="org.bear.bookstore.common.interceptor.AuthorityInterceptor"></bean>
	    </mvc:interceptor>
	    
	    <mvc:interceptor>
	    	<mvc:mapping path="/**"/>
	    	<!-- 
	    		/api/cus?siteLanguage=nl 这样修改locale
	    	 -->
	    	<bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
	    		<property name="paramName" value="siteLanguage"/>
	    	</bean>
	    </mvc:interceptor> 
	      
	    <mvc:interceptor>
	    	<mvc:mapping path="/**"/>
	    	<!-- 
	    		/api/cus?siteTheme=cool 这样修改皮肤
	    	 -->
	    	<bean id="themeChangeInterceptor" class="org.springframework.web.servlet.theme.ThemeChangeInterceptor">
	    		<property name="paramName" value="siteTheme"/>
	    	</bean>
	    </mvc:interceptor>   
	</mvc:interceptors>
	
	<!-- WebMvcConfigurerAdapte或者@CrossOrigin注解 -->
	<mvc:cors>
		<!-- 
			allowed-methods="GET, PUT"
			allowed-headers="header1, header2, header3"
			exposed-headers="header1, header2" allow-credentials="false"
		 -->
		<mvc:mapping path="/api/cus/**"
			allowed-origins="http://localhost" 
			max-age="123" />
	</mvc:cors>
	
	
	<websocket:handlers allowed-origins="http://localhost">
        <websocket:mapping path="/myHandler" handler="myHandler"/>
        <websocket:handshake-interceptors>
            <bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
        </websocket:handshake-interceptors>
        <websocket:sockjs/>
    </websocket:handlers>
    
    <bean class="org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean">
        <property name="maxTextMessageBufferSize" value="8192"/>
        <property name="maxBinaryMessageBufferSize" value="8192"/>
    </bean>
    
    
    <!--   stomp and message broker config  start -->  
    <websocket:message-broker application-destination-prefix="/app">  
        <websocket:transport send-timeout="15000" send-buffer-size="524288" message-size="131072"/>
        <!--   websocket 底层连接地址 -->  
        <websocket:stomp-endpoint path="/marcopolo" >  
            <websocket:sockjs/>  
        </websocket:stomp-endpoint>  
         <websocket:simple-broker prefix="/topic,/queue" />  
    </websocket:message-broker>  
    <!--   stomp and message broker config  end--> 
    
</beans>